require('dotenv').config()

var { app } = require('../app');
var http = require('http');
var _ = require('lodash');
var process = require('process');
const mongoose = require('../config/mongo-connection')

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);
app.set('connectedMachines', {});



// Create HTTP server.
var server = http.createServer(app);


// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) return val; // named pipe
	if (port >= 0) return port; // port number
	return false;
}

function onError(error){
    switch(error.code){
        case 'EACCESS':
            process.ext(1);
            break;
        case 'EADDRINUSE':
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening(){
    var addr = server.address();
    console.log(addr)
    var bind = typeof addr === 'string' ? `pipe ${addr}` : `pipe ${addr.port}`;
    console.log(`Server started at ${bind}`);
}

const gracefulShutdown = function() {
	console.log(`stopping Node server!`);
	server.close(function() {
		console.log(`--node server stopped!`);
	});

	setTimeout(function() {
		console.log(`could not close connections in time, forcefully shutting down`);
		process.exit(1);
	}, 3 * 1000);
};

// listen for INT signal e.g. Ctrl-C
//process.on('SIGINT', gracefulShutdown);